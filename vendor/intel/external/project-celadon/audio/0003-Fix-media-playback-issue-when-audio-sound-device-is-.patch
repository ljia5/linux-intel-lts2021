From 04def4991e735900f1851bf6fa5e2d5a65223234 Mon Sep 17 00:00:00 2001
From: "Martin, Chen" <haochuan.z.chen@intel.com>
Date: Mon, 9 Oct 2023 23:40:19 +0800
Subject: [PATCH] Fix media playback issue when audio sound device is not
 available

Video freezes when played for the first time after being pushed
to the DUT.

Media playback is freezing as opening of a sound card is failing
due to board not connected.

Introduced a counter to check the sound card unavailability failures.
When the counter reaches maximum count, fallback to dummy sound card.

Tests Done:
- Verified Audio playback with external input audio clk
- Verified Audio playback without external input audio clk
- Verified Video playback with external input audio clk
- Verified Video playback without external input audio clk
- Verified Audio capture with external input audio clk
- Verified Audio capture without external input audio clk

Tracked-On: OAM-112568
Signed-off-by: Deepa K G <g.k.deepa@intel.com>
Signed-off-by: Martin, Chen <haochuan.z.chen@intel.com>
---
 primary/audio_hw.c | 172 ++++++++++++++++++++++++++-------------------
 1 file changed, 101 insertions(+), 71 deletions(-)

diff --git a/primary/audio_hw.c b/primary/audio_hw.c
index 7f363ba..cd767bb 100644
--- a/primary/audio_hw.c
+++ b/primary/audio_hw.c
@@ -81,6 +81,8 @@
 #define MILLIS_PER_SECOND      1000
 #define NANOS_PER_SECOND       (NANOS_PER_MILLISECOND * MILLIS_PER_SECOND)
 
+#define MAX_FAIL 20
+
 #define GET_PCM_CARD_NUMBER(temp_card)  (((temp_card = get_pcm_card("PCH"))!=-1? temp_card:\
     ((temp_card = get_pcm_card("Intel"))!=-1? temp_card:\
     (temp_card = get_pcm_card("sofhdadsp")))))
@@ -282,6 +284,7 @@ struct audio_device {
     struct resampler_itfe *voip_out_resampler;
 //BT SCO VoIP Call]
      bool custom_audio;                 // flag to check if it is hifi audio
+     int fail_count;
 };
 
 struct stream_out {
@@ -462,12 +465,18 @@ pcm_data_t *route_out_pcm(struct stream_out *out,bus_addresses_t bus_to_device)
         case bus0_audio_zone_0:
             /*audio zone 0*/
             if (adev->custom_audio) {
-                adev->card = get_pcm_card("ssp0loopback");
-                adev->device  = PCM_DEVICE_AVS;
+                if (adev->fail_count < MAX_FAIL) {
+                    adev->card = get_pcm_card("ssp0loopback");
+                    adev->device  = PCM_DEVICE_AVS;
+                } else {
+                    adev->card = get_pcm_card("Dummy");
+                    adev->device  = PCM_DEVICE;
+                }
                 out->pcm_config->format =  pcm_config_out_hifi.format;
                 out->pcm_config->period_size = pcm_config_out_hifi.period_size;
                 out->pcm_config->period_count = pcm_config_out_hifi.period_count;
                 out->pcm_config->channels = MAX_OUT_CHANNELS;
+                out->pcm_config->rate = OUT_SAMPLING_RATE;
             } else {
                 adev->card = get_pcm_card("avsrt56401");
                 adev->device  = PCM_DEVICE_AVS;
@@ -483,8 +492,7 @@ pcm_data_t *route_out_pcm(struct stream_out *out,bus_addresses_t bus_to_device)
                     ALOGV("default Audio primary cards asked  1\n");
                 }
             }
-            adev->audio_zone = 0; 
-            out->pcm_config->rate = OUT_SAMPLING_RATE;
+            adev->audio_zone = 0;
             ALOGV("bus0_audio_zone_0 is audio zone 1 asked \n");
             if (adev->card < 0) {
                 adev->card = get_pcm_card("Dummy");
@@ -606,7 +614,7 @@ static int start_input_stream(struct stream_in *in)
 
     if (!strcmp(in->bus_address,"bus_1000_input_zone_0")) {
         ALOGV("the input is in zone 0 bus_1000_input_zone_0");
-        if (adev->custom_audio) {
+        if (adev->custom_audio && adev->fail_count < MAX_FAIL) {
             adev->cardc = get_pcm_card("ssp0loopback");
             adev->device  = PCM_DEVICE_AVS;
         } else {
@@ -614,10 +622,10 @@ static int start_input_stream(struct stream_in *in)
             adev->device  = PCM_DEVICE_AVS;
         }
         if (adev->cardc < 0)
-	{
+        {
             adev->cardc = get_pcm_card("Dummy");
             adev->device  = PCM_DEVICE_DUMMY;
-	}
+        }
     } else if (!strcmp(in->bus_address,"bus_2000_input_zone_1")) {
         ALOGV("the input is in zone 1 bus_2000_input_zone_1");
         adev->cardc = get_pcm_card("avsrt56402");
@@ -636,13 +644,13 @@ static int start_input_stream(struct stream_in *in)
 //BT SCO VoIP Call]
     } else {
         ALOGI("PCM record card selected = %d, \n", adev->cardc);
-	if(adev->custom_audio) {
+        if(adev->custom_audio && adev->fail_count < MAX_FAIL) {
             in->pcm_config->format = PCM_FORMAT_S32_LE;
-	    in->pcm_config->channels = MAX_IN_CHANNELS;
-	    in->pcm_config->period_size = IN_PERIOD_SIZE;
-	    in->pcm_config->period_count = IN_PERIOD_COUNT;
-	    in->pcm_config->rate = IN_SAMPLING_RATE;
-	}
+            in->pcm_config->channels = MAX_IN_CHANNELS;
+            in->pcm_config->period_size = IN_PERIOD_SIZE;
+            in->pcm_config->period_count = IN_PERIOD_COUNT;
+            in->pcm_config->rate = IN_SAMPLING_RATE;
+    }
         ALOGV("%s : config : [rate %d format %d channels %d]", __func__,
             in->pcm_config->rate, in->pcm_config->format, in->pcm_config->channels);
         in->pcm = pcm_open(adev->cardc, adev->device, PCM_IN, in->pcm_config);
@@ -858,8 +866,8 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
      * executing out_set_parameters() while holding the hw device
      * mutex
      */
-    pthread_mutex_lock(&adev->lock);
     pthread_mutex_lock(&out->lock);
+    pthread_mutex_lock(&adev->lock);
 
     if (adev->out_needs_standby) {
         do_out_standby(out);
@@ -985,7 +993,7 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
         /* In media case adjust 12 channel data to 16 channel and then write*/
         if (adev->custom_audio) {
 #ifdef DEBUG_PCM_DUMP
-	    if (out_write_dump_before != NULL)
+            if (out_write_dump_before != NULL)
                 fwrite(out_buffer, 1, out_frames * frame_size, out_write_dump_before);
 #endif
             size_t frames_in = round_to_16_mult(out->pcm_config->period_size);
@@ -1023,9 +1031,19 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
                 free(buf_out);
                 return ret;
             }
+            #endif
             free(buf_in);
             free(buf_out);
-            #endif
+
+            if (ret == -1) {
+                /* For custom audio, if fail with max count, switch to dummy card */
+                pthread_mutex_lock(&adev->lock);
+                adev->fail_count++;
+                if (adev->fail_count > MAX_FAIL) {
+                    do_out_standby(out);
+                }
+                pthread_mutex_unlock(&adev->lock);
+            }
         } else {
             /* In non-media case write 2 channel audio*/
             ALOGV("channel in out_write %d ", out->pcm_config->channels);
@@ -1237,11 +1255,11 @@ static int in_standby(struct audio_stream *stream)
 {
     struct stream_in *in = (struct stream_in *)stream;
 
-    pthread_mutex_lock(&in->dev->lock);
     pthread_mutex_lock(&in->lock);
+    pthread_mutex_lock(&in->dev->lock);
     do_in_standby(in);
-    pthread_mutex_unlock(&in->lock);
     pthread_mutex_unlock(&in->dev->lock);
+    pthread_mutex_unlock(&in->lock);
 
     return 0;
 }
@@ -1352,8 +1370,8 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
      * executing in_set_parameters() while holding the hw device
      * mutex
      */
-    pthread_mutex_lock(&adev->lock);
     pthread_mutex_lock(&in->lock);
+    pthread_mutex_lock(&adev->lock);
     if (is_bt_call_active(adev) == 1) {
         // Wont allow to read from normal input if SCO loopback is ON.
         ALOGD("%s : primary hal in_read called during sco_thread, skip and return.", __func__);
@@ -1437,8 +1455,8 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
         memset(buf_in, 0, buf_size_in);
         memset(buf_remapped, 0, buf_size_remapped);
         memset(buf_out, 0, buf_size_out);
-        
-	ret = pcm_read(in->pcm, buf_in, buf_size_in);
+
+        ret = pcm_read(in->pcm, buf_in, buf_size_in);
         in->frames_read += frames_in;
         struct aec_info info;
         get_pcm_timestamp(in->pcm, in->pcm_config->rate, &info, false /*isOutput*/);
@@ -1489,21 +1507,28 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
         free(buf_remapped);
 //BT SCO VoIP Call]
     } else {
-         	    
          if(adev->custom_audio) {
-            //allocate 16 
+            //allocate 16
             size_t frames_in = round_to_16_mult(IN_PERIOD_SIZE);
             size_t buf_size_in_16 = MAX_IN_CHANNELS * frames_in * SAMPLE_SIZE_IN_BYTES_HIFI;
             int32_t *buf_in_16 = (int32_t *) malloc (buf_size_in_16);
 
             ret = pcm_read(in->pcm, buf_in_16, buf_size_in_16);
+            if (ret < 0) {
+                pthread_mutex_lock(&adev->lock);
+                adev->fail_count++;
+                if (adev->fail_count > MAX_FAIL) {
+                    do_in_standby(in);
+                }
+                pthread_mutex_unlock(&adev->lock);
+            }
 
-	    //adjust channel to 2 to framework buffer
+            //adjust channel to 2 to framework buffer
             adjust_channels(buf_in_16, MAX_IN_CHANNELS, buffer, 2, 
                                         SAMPLE_SIZE_IN_BYTES_HIFI, buf_size_in_16);
-	    free(buf_in_16);
-	}
-	else
+            free(buf_in_16);
+        }
+    else
             /* pcm read for primary card */
             ret = pcm_read(in->pcm, buffer, bytes);
 
@@ -1693,7 +1718,7 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
 
     if (parms == NULL)
         return 0;
-    if (adev->custom_audio) {
+    if (adev->custom_audio && adev->fail_count < MAX_FAIL) {
         adev->primarycard = get_pcm_card("ssp0loopback");
         adev->device = PCM_DEVICE_AVS;
     } else {
@@ -1702,7 +1727,7 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
         if (adev->primarycard < 0){
             adev->primarycard = get_pcm_card("Dummy");
             adev->device = PCM_DEVICE_DUMMY;
-	}
+        }
     }
     update_bt_card(adev);
 #ifdef DEBUG_WITH_DELAY
@@ -1897,7 +1922,7 @@ static int adev_open_input_stream(struct audio_hw_device *dev,
 
     *stream_in = NULL;
     /*get default AVS card 1 info*/
-    if (adev->custom_audio)
+    if (adev->custom_audio && adev->fail_count < MAX_FAIL)
         adev->cardc = get_pcm_card("ssp0loopback");
     else
         adev->cardc = get_pcm_card("avsrt56401");
@@ -2137,10 +2162,10 @@ err:
 }
 
 void copy_to_nth_ch(int32_t *in_buff, int in_channels,int32_t *out_buff, int out_channels, int num_in_bytes,
-		int channel_offset)
-{   
+                int channel_offset)
+{
     size_t num_in_samples = (num_in_bytes) / sizeof(*in_buff) /*size of buffer pointer*/;
-    size_t num_out_samples = (num_in_samples * (out_channels)) / (in_channels); 
+    size_t num_out_samples = (num_in_samples * (out_channels)) / (in_channels);
     int32_t *dst_ptr = (out_buff) + num_out_samples - 1;
     size_t src_index;
     int32_t *src_ptr = (in_buff) + num_in_samples - 1;
@@ -2152,7 +2177,7 @@ void copy_to_nth_ch(int32_t *in_buff, int in_channels,int32_t *out_buff, int out
         for (dst_offset = 0; dst_offset < zero_fill_channels; dst_offset++) {
             *dst_ptr-- = 0;
         }
-	//copy data in nth channel
+        //copy data in nth channel
         *dst_ptr-- = *src_ptr;
         dst_offset++;
         //fill zeros for the first set of zero channels
@@ -2222,20 +2247,22 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
 
     if (in_config->channels != out_config->channels)
         need_remapper = true;
+
     frames_out = round_to_16_mult(out_config->period_size);
     frames_in = round_to_16_mult(in_config->period_size);
+
     //Buffer allocation and resampler creation for Primary IN -> BT OUT
     if (!strcmp("primary_to_bt",id) && adev->custom_audio) {
-	//24bit In buffer
+        //24bit In buffer
         buf_size_in = in_config->channels  * frames_in * SAMPLE_SIZE_IN_BYTES_HIFI;
-	//16bit In buffer
+        //16bit In buffer
         buf_size_in_16 = in_config->channels * frames_in * sample_size_in_bytes;
-	//16bit remapped buffer
+        //16bit remapped buffer
         buf_size_remapped = out_config->channels * frames_in * sample_size_in_bytes;
-	//16bit out buffer
+        //16bit out buffer
         buf_size_out_16 = out_config->channels * frames_out * sample_size_in_bytes;
-        
-	buf_remapped = (int16_t *) malloc (buf_size_remapped);
+
+        buf_remapped = (int16_t *) malloc (buf_size_remapped);
         buf_out_16 = (int16_t *) malloc (buf_size_out_16);
         buf_in_16 = (int16_t *) malloc (buf_size_in_16);
         buf_in = (int32_t *) malloc (buf_size_in);
@@ -2254,7 +2281,7 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
             goto resamp_err;
         }
 
-	if (buf_in_16 == NULL || buf_in == NULL || buf_out_16 == NULL || buf_remapped == NULL) {
+        if (buf_in_16 == NULL || buf_in == NULL || buf_out_16 == NULL || buf_remapped == NULL) {
             if (buf_in_16 != NULL)
                 free(buf_in_16);
             if (buf_in != NULL)
@@ -2266,11 +2293,11 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
             goto exit;
         }
     } else if (!strcmp("bt_to_primary",id) && adev->custom_audio) {/*Buffer allocation and resampler creation for BT IN -> PRIMARY OUT*/
-	//input from BT
+        //input from BT
         buf_size_in_16 = in_config->channels * frames_in * sample_size_in_bytes;
-	//intermediate resampled output
+        //intermediate resampled output
         buf_size_out_16 = in_config->channels * frames_out * sample_size_in_bytes /*16bit -> 2bytes*/;
-	//intermediate output to primary 24bit
+        //intermediate output to primary 24bit
         buf_size_out = in_config->channels * frames_out * SAMPLE_SIZE_IN_BYTES_HIFI /*24bit -> 4bytes */;
         //output to primary
         int32_t out_channels = MAX_OUT_CHANNELS;
@@ -2297,7 +2324,7 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
             goto resamp_err;
         }
 
-	if (buf_in_16 == NULL || buf_out == NULL || buf_out_hifi == NULL || buf_out_16 == NULL) {
+        if (buf_in_16 == NULL || buf_out == NULL || buf_out_hifi == NULL || buf_out_16 == NULL) {
             if (buf_in_16 != NULL)
                 free(buf_in_16);
             if (buf_out != NULL)
@@ -2309,15 +2336,14 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
             goto exit;
         }
     } else {
-	    
         buf_size_out = out_config->channels * frames_out * sample_size_in_bytes;
         buf_size_in = in_config->channels* frames_in * sample_size_in_bytes;
         buf_size_remapped = out_config->channels * frames_in * sample_size_in_bytes;
         buf_remapped_16 = (int16_t *) malloc (buf_size_remapped);
         buf_out_16 = (int16_t *) malloc (buf_size_out);
         buf_in_16 = (int16_t *) malloc (buf_size_in);
-	
-	if (need_resampler) {
+
+        if (need_resampler) {
             int ret;
             ret = create_resampler(in_config->rate /*src rate*/, out_config->rate /*dst rate*/,
                                        out_config->channels /*channels*/,
@@ -2336,8 +2362,8 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
                 free(buf_in_16);
             if (buf_out_16 != NULL) {
                 free(buf_out_16);
-		buf_out_16 = NULL;
-	    }
+                buf_out_16 = NULL;
+            }
             if (buf_remapped_16 != NULL)
                 free(buf_remapped_16);
             goto exit;
@@ -2367,14 +2393,14 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
             }
 #endif
 #ifdef DEBUG_PCM_DUMP
-	    if (loopback_read != NULL)
+            if (loopback_read != NULL)
                 fwrite(buf_in, 1, buf_size_in, loopback_read);
 #endif
-            // convert it in 16bit buffer
-            memcpy_by_audio_format(buf_in_16, AUDIO_FORMAT_PCM_16_BIT, buf_in, AUDIO_FORMAT_PCM_8_24_BIT, buf_size_in);
+                // convert it in 16bit buffer
+                memcpy_by_audio_format(buf_in_16, AUDIO_FORMAT_PCM_16_BIT, buf_in, AUDIO_FORMAT_PCM_8_24_BIT, buf_size_in);
 
 #ifdef DEBUG_PCM_DUMP
-	    if (loopback_write_13 != NULL)
+            if (loopback_write_13 != NULL)
                 fwrite(buf_in_16, 1, buf_size_in_16, loopback_write_13);
 #endif
             // adjust channel 16 to 1
@@ -2382,20 +2408,19 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
                                                  out_config->channels, sample_size_in_bytes,
                                                  buf_size_in_16);
 #ifdef DEBUG_PCM_DUMP
-	    if (loopback_write != NULL)
+            if (loopback_write != NULL)
                 fwrite(buf_remapped, 1, buf_size_in_16, loopback_write);
 #endif
-            ALOGV("%s : upsampling [%d -> %d]", __func__, in_config->rate, out_config->rate);
-            // resample data from 48 to 8k
-            resampler->resample_from_input(resampler, (int16_t *)buf_remapped,
+                ALOGV("%s : upsampling [%d -> %d]", __func__, in_config->rate, out_config->rate);
+                // resample data from 48 to 8k
+                resampler->resample_from_input(resampler, (int16_t *)buf_remapped,
                                                (size_t *)&frames_in, (int16_t *) buf_out_16,
                                                (size_t *)&frames_out);
 #ifdef DEBUG_PCM_DUMP
-	    if (loopback_remapped != NULL)
+            if (loopback_remapped != NULL)
                 fwrite(buf_out_16, 1, buf_size_out_16, loopback_remapped);
 #endif
 
-
             // write data to BT device
             write_err = pcm_write(out_proxy, buf_out_16, buf_size_out_16);
             if (write_err != 0) {
@@ -2406,7 +2431,7 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
         }
 
         if (!strcmp("bt_to_primary",id) && adev->custom_audio) {
-	   // read 16bit data from the BT device
+            // read 16bit data from the BT device
             read_err = pcm_read(in_proxy, buf_in_16, buf_size_in_16);
             if (read_err != 0) {
                 ALOGE("%s : proxy_read failure %d", __func__, read_err);
@@ -2427,23 +2452,23 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
 #endif
             // convert it into 24bit buffer
             memcpy_by_audio_format(buf_out, AUDIO_FORMAT_PCM_8_24_BIT, buf_out_16,
-			    AUDIO_FORMAT_PCM_16_BIT, buf_size_out_16);
+                AUDIO_FORMAT_PCM_16_BIT, buf_size_out_16);
 
 #ifdef DEBUG_PCM_DUMP
             if (loopback_write != NULL) {
                 fwrite(buf_out, 1, buf_size_out, loopback_write);
             }
 #endif
-	    //Adjust buffer to 16 channels and write hfp data only in 13 th ch
-	    copy_to_nth_ch(buf_out, in_config->channels, buf_out_hifi, out_config->channels,
-			    buf_size_out, BT_HFP_DATA_CH);
+            //Adjust buffer to 16 channels and write hfp data only in 13 th ch
+            copy_to_nth_ch(buf_out, in_config->channels, buf_out_hifi, out_config->channels,
+                buf_size_out, BT_HFP_DATA_CH);
 
 #ifdef DEBUG_PCM_DUMP
-	    if (loopback_write_13 != NULL) {
+            if (loopback_write_13 != NULL) {
                 fwrite(buf_out_hifi, 1,  buf_size_out_hifi, loopback_write_13);
             }
 #endif
-	    // write data to Primary device
+            // write data to Primary device
             write_err = pcm_write(out_proxy, buf_out, buf_size_out);
 
             if (write_err != 0) {
@@ -2583,11 +2608,11 @@ exit:
         if (buf_remapped != NULL)
             free(buf_remapped);
     } else {
-	if (buf_out_16 != NULL)    
+        if (buf_out_16 != NULL)
             free(buf_out_16);
-	if (buf_in_16 != NULL)
+        if (buf_in_16 != NULL)
             free(buf_in_16);
-	if (buf_remapped_16 != NULL)
+        if (buf_remapped_16 != NULL)
             free(buf_remapped_16);
     }
     ALOGD("%s --", __func__);
@@ -2750,7 +2775,7 @@ static int adev_set_audio_port_config(struct audio_hw_device *dev ,
     ALOGV("setAudioPortConfig Vol convert: %f %f",left, right);
 
     snprintf(mixer_path,PATH_MAX,"/vendor/etc/mixer_paths_%d.xml", card);
-    if (adev->custom_audio)
+    if (adev->custom_audio && adev->fail_count < MAX_FAIL)
         card = get_pcm_card("ssp0loopback");
     else
         card = get_pcm_card("avsrt56401");
@@ -2938,6 +2963,11 @@ static int adev_open(const hw_module_t* module, const char* name,
     adev->in_needs_standby = false;
     adev->out_needs_standby = false;
 
+    /* This is WA for apollo board audio depends on external input clock,
+     * whick blocks current validation. Will check when whole system integration.
+     */
+    adev->fail_count = 0;
+
 #ifdef DEBUG_PCM_DUMP
     sco_call_write = fopen("/vendor/dump/sco_call_write.pcm", "a");
     sco_call_write_remapped = fopen("/vendor/dump/sco_call_write_remapped.pcm", "a");
-- 
2.17.1

